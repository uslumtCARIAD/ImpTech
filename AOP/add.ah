#ifndef __Add_AH__
#define __Add_AH__

#include<stdio.h>

aspect Add {
  pointcut read_input1() = get("int input1");
  advice read_input1() : after() { // % ...::%(...) is for any return type function that takes any arg
    //printf(JoinPoint::resulttype()); // returns only char that specifies the return type
    //printf(JoinPoint::filename()); // print file name where the pointcut comes from
    //printf(JoinPoint::signature()); // print function signature (returntype and name)
    printf("Rte_IRead_%s", tjp->signature());
    printf("_ = %d",*tjp->entity()); 
    printf("\n");
  }

  pointcut read_input2() = get("int input2");
  advice read_input2() : after() { // % ...::%(...) is for any return type function that takes any arg
    //printf(JoinPoint::resulttype()); // returns only char that specifies the return type
    //printf(JoinPoint::filename()); // print file name where the pointcut comes from
    //printf(JoinPoint::signature()); // print function signature (returntype and name)
    printf("Rte_IRead_%s", tjp->signature());
    printf("_ = %d",*tjp->entity()); 
    printf("\n");
  }

  advice builtin("% operator +(int, int)"): after() { // % ...::%(...) is for any return type function that takes any arg
    //printf(JoinPoint::resulttype()); // returns only char that specifies the return type
    //printf(JoinPoint::filename()); // print file name where the pointcut comes from
    //printf(JoinPoint::signature()); // print function signature (returntype and name)
    printf("Computation");
    printf(" of %s", tjp->signature());
    printf("\n");
  }

  pointcut global() = set("int global");
  advice global() : after() {
    printf("Global variable is declared");
  }

};

#endif
